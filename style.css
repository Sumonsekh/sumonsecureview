document.addEventListener("DOMContentLoaded", () => {
  const form = document.getElementById("uploadForm");
  const contentType = document.getElementById("contentType");
  const messageField = document.getElementById("messageField");
  const fileField = document.getElementById("fileField");
  const generatedLink = document.getElementById("generatedLink");

  contentType.addEventListener("change", () => {
    const type = contentType.value;
    if (type === "text") {
      messageField.classList.remove("hidden");
      fileField.classList.add("hidden");
    } else {
      messageField.classList.add("hidden");
      fileField.classList.remove("hidden");
    }
  });

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData();
    const type = contentType.value;
    formData.append("type", type);

    if (type === "text") {
      const message = document.getElementById("message").value;
      if (!message.trim()) {
        alert("Message cannot be empty.");
        return;
      }
      formData.append("content", message);
    } else {
      const file = document.getElementById("file").files[0];
      if (!file) {
        alert("Please select a file.");
        return;
      }
      const base64 = await toBase64(file);
      formData.append("content", base64);
    }

    const response = await fetch("/api/upload", {
      method: "POST",
      body: formData,
    });

    if (response.ok) {
      const { accessId } = await response.json();
      const link = `${window.location.origin}/view/${accessId}`;
      generatedLink.value = link;
      generatedLink.classList.remove("hidden");
    } else {
      alert("Upload failed. Try again.");
    }
  });

  function toBase64(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = (error) => reject(error);
    });
  }
});
